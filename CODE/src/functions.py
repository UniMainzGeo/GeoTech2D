import numpy as np
from sys import exit

#------------------------------------------------------------------------------
def getShapeQuadLine(nnel, nip) :

    # assign integration points coordinates & weights
    if nip == 2 :

        x = np.array([-np.sqrt(1.0/3.0), np.sqrt(1.0/3.0)])
        w = np.array([1.0, 1.0])

    elif nip == 3 :

        x = np.array([-np.sqrt(3.0/5.0), 0.0, np.sqrt(3.0/5.0)])
        w = np.array([5.0/9.0, 8.0/9.0, 5.0/9.0])

    else :

        exit('Error! Unsupported integration point number')

    # compute shape functions and derivatives
    N  = np.empty((nip, nnel))
    dN = np.empty((nip, nnel))

    for i in range(nip):

        xi = x[i]

        if nnel == 2:

            N[i, 0] = (1.0 - xi)/2.0
            N[i, 1] = (1.0 + xi)/2.0

            # dNdXi
            dN[i, 0] = -1.0/2.0
            dN[i, 1] =  1.0/2.0

        elif nnel == 3:

            N[i, 0] = xi*(xi - 1.0)/2.0
            N[i, 1] = 1.0 - xi**2
            N[i, 2] = xi*(xi + 1.0)/2.0

            # dNdXi
            dN[i, 0] =  xi - 1.0/2.0
            dN[i, 1] = -2.0*xi
            dN[i, 2] =  xi + 1.0/2.0

        else :

            exit('Error! Unsupported element order')

    return N, dN, w

#------------------------------------------------------------------------------
def getShapeQuadTria(nnel, nip) :

    # assign integration points coordinates & weights
    if nip == 3 :

        data = np.array([
                (0.166666666666667, 0.166666666666667, 0.166666666666667),
                (0.666666666666667, 0.166666666666667, 0.166666666666667),
                (0.166666666666667, 0.666666666666667, 0.166666666666667)])

    elif nip == 6 :

        data = np.array([
                (0.108103018168070, 0.445948490915965, 0.111690794839006),
                (0.445948490915965, 0.108103018168070, 0.111690794839006),
                (0.445948490915965, 0.445948490915965, 0.111690794839006),
                (0.816847572980459, 0.091576213509771, 0.054975871827661),
                (0.091576213509771, 0.816847572980459, 0.054975871827661),
                (0.091576213509771, 0.091576213509771, 0.054975871827661)])

    elif nip == 12 :

        data = np.array([
                (0.873821971016996, 0.063089014491502, 0.025422453185104),
                (0.063089014491502, 0.873821971016996, 0.025422453185104),
                (0.063089014491502, 0.063089014491502, 0.025422453185104),
                (0.501426509658179, 0.249286745170910, 0.058393137863189),
                (0.249286745170910, 0.501426509658179, 0.058393137863189),
                (0.249286745170910, 0.249286745170910, 0.058393137863189),
                (0.636502499121399, 0.310352451033785, 0.041425537809187),
                (0.310352451033785, 0.636502499121399, 0.041425537809187),
                (0.636502499121399, 0.053145049844816, 0.041425537809187),
                (0.053145049844816, 0.636502499121399, 0.041425537809187),
                (0.310352451033785, 0.053145049844816, 0.041425537809187),
                (0.053145049844816, 0.310352451033785, 0.041425537809187)])
    else :

        exit('Error! Unsupported integration point number')

    # compute shape functions and derivatives
    ndim = 2
    N    = np.empty((nip, nnel))
    dN   = np.empty((nip, ndim, nnel))
    w    = np.empty((nip))

    for i in range(nip):

        L1   = data[i, 0]
        L2   = data[i, 1]
        L3   = 1.0 - L1 - L2;
        w[i] = data[i, 2]

        if nnel == 3:

            N[i, 0] = L1
            N[i, 1] = L2
            N[i, 2] = L3

            # dNdXi
            dN[i, 0, 0] =  1.0
            dN[i, 0, 1] =  0.0
            dN[i, 0, 2] = -1.0

            # dNdEta
            dN[i, 1, 0] =  0.0
            dN[i, 1, 1] =  1.0
            dN[i, 1, 2] = -1.0

        elif nnel == 6:

            N[i, 0] = (2*L1 - 1.0)*L1
            N[i, 1] = (2*L2 - 1.0)*L2
            N[i, 2] = (2*L3 - 1.0)*L3
            N[i, 3] = 4.0*L1*L2
            N[i, 4] = 4.0*L2*L3
            N[i, 5] = 4.0*L1*L3

            # dNdXi
            dN[i, 0, 0] =  4.0*L1 - 1.0
            dN[i, 0, 1] =  0.0
            dN[i, 0, 2] =  1.0 - 4.0*L3
            dN[i, 0, 3] =  4.0*L2
            dN[i, 0, 4] = -4.0*L2
            dN[i, 0, 5] =  4.0*L3 - 4.0*L1

            # dNdEta
            dN[i, 1, 0] =  0.0
            dN[i, 1, 1] =  4.0*L2 - 1.0
            dN[i, 1, 2] =  1.0 - 4.0*L3
            dN[i, 1, 3] =  4.0*L1
            dN[i, 1, 4] =  4.0*L3 - 4.0*L2
            dN[i, 1, 5] = -4.0*L1

        elif nnel == 7:

            N[i, 0] =   3.0*L1*L2*L3 + (2*L1 - 1.0)*L1
            N[i, 1] =   3.0*L1*L2*L3 + (2*L2 - 1.0)*L2
            N[i, 2] =   3.0*L1*L2*L3 + (2*L3 - 1.0)*L3
            N[i, 3] = -12.0*L1*L2*L3 + 4.0*L1*L2
            N[i, 4] = -12.0*L1*L2*L3 + 4.0*L2*L3
            N[i, 5] = -12.0*L1*L2*L3 + 4.0*L1*L3
            N[i, 6] =  27.0*L1*L2*L3

            # dNdXi
            dN[i, 0, 0] =   3.0*L2*L3 -  3.0*L1*L2 + 4.0*L1 - 1.0
            dN[i, 0, 1] =   3.0*L2*L3 -  3.0*L1*L2
            dN[i, 0, 2] =   3.0*L2*L3 -  3.0*L1*L2 + 1.0 - 4.0*L3
            dN[i, 0, 3] = -12.0*L2*L3 + 12.0*L1*L2 + 4.0*L2
            dN[i, 0, 4] = -12.0*L2*L3 + 12.0*L1*L2 - 4.0*L2
            dN[i, 0, 5] = -12.0*L2*L3 + 12.0*L1*L2 + 4.0*L3 - 4.0*L1
            dN[i, 0, 6] =  27.0*L2*L3 - 27.0*L1*L2

            # dNdEta
            dN[i, 1, 0] =   3.0*L1*L3 -  3.0*L1*L2
            dN[i, 1, 1] =   3.0*L1*L3 -  3.0*L1*L2 + 4.0*L2 - 1.0
            dN[i, 1, 2] =   3.0*L1*L3 -  3.0*L1*L2 + 1.0 - 4.0*L3
            dN[i, 1, 3] = -12.0*L1*L3 + 12.0*L1*L2 + 4.0*L1
            dN[i, 1, 4] = -12.0*L1*L3 + 12.0*L1*L2 + 4.0*L3 - 4.0*L2
            dN[i, 1, 5] = -12.0*L1*L3 + 12.0*L1*L2 - 4.0*L1
            dN[i, 1, 6] =  27.0*L1*L3 - 27.0*L1*L2

        else :

            exit('Error! Unsupported element order')

    return N, dN, w

#------------------------------------------------------------------------------
